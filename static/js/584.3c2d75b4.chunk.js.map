{"version":3,"file":"static/js/584.3c2d75b4.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","redux/filter/selectors.js","components/Filter/Filter.jsx","redux/selectors.js","components/ContactList/ContactList.jsx","pages/Contacts.js"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoadingContacts = state => state.contacts.isLoading;\n\nexport const selectErrorContacts = state => state.contacts.error;\n","import { Field, Formik } from 'formik';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as Yup from 'yup';\n//chakra\nimport {\n  Box,\n  FormControl,\n  FormLabel,\n  Input,\n  Button,\n  FormErrorMessage,\n  Flex,\n  VStack,\n} from '@chakra-ui/react';\n\nconst Schema = Yup.object().shape({\n  name: Yup.string().min(2, 'Too Short!').max(20, 'Too Long!').required(),\n  number: Yup.string().min(6, 'Too Short!').max(15, 'Too Long!').required(),\n});\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const onSubmit = (formData, actions) => {\n    const sameName = contacts.find(\n      el => el.name.toLowerCase() === formData.name.toLowerCase()\n    );\n\n    if (sameName) return alert(formData.name + ' is already in contacts.');\n\n    dispatch(addContact({ ...formData }));\n    actions.resetForm();\n  };\n\n  return (\n    <Flex align=\"center\" justify=\"center\" h=\"40vh\">\n      <Box\n        bg=\"blue.300\"\n        p={6}\n        rounded=\"md\"\n        w={'15%'}\n        position={'fixed'}\n        top={150}\n      >\n        <Formik\n          initialValues={{\n            name: '',\n            number: '',\n          }}\n          onSubmit={onSubmit}\n          validationSchema={Schema}\n        >\n          {({ handleSubmit, errors, touched }) => (\n            <form onSubmit={handleSubmit}>\n              <VStack spacing={10} w={'90%'}>\n                <FormControl isInvalid={!!errors.name && touched.name}>\n                  <FormLabel htmlFor=\"name\" fontSize=\"30px\" fontWeight={700}>\n                    Name\n                  </FormLabel>\n                  <Field\n                    as={Input}\n                    id=\"name\"\n                    name=\"name\"\n                    type=\"text\"\n                    variant=\"filled\"\n                    fontSize=\"15px\"\n                    bg=\"blue.100\"\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                    required\n                  />\n                  <FormErrorMessage>{errors.name}</FormErrorMessage>\n                </FormControl>\n                <FormControl isInvalid={!!errors.number && touched.number}>\n                  <FormLabel htmlFor=\"name\" fontSize=\"30px\" fontWeight={700}>\n                    Number\n                  </FormLabel>\n                  <Field\n                    as={Input}\n                    variant=\"filled\"\n                    fontSize=\"15px\"\n                    bg=\"blue.100\"\n                    type=\"tel\"\n                    name=\"number\"\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                    title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                    required\n                  />\n                  <FormErrorMessage>{errors.email}</FormErrorMessage>\n                </FormControl>\n                <Button\n                  fontSize=\"20px\"\n                  colorScheme=\"yellow\"\n                  width=\"full\"\n                  padding={4}\n                  type=\"submit\"\n                >\n                  Add contact\n                </Button>\n              </VStack>\n            </form>\n          )}\n        </Formik>\n      </Box>\n    </Flex>\n  );\n};\n","export const selectFilter = state => state.filter.value;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from '../../redux/filter/filterSlice';\nimport { selectFilter } from 'redux/filter/selectors';\nimport { Form } from 'react-bootstrap';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filterValue = useSelector(selectFilter);\n\n  const onChange = e => {\n    const value = e.target.value.toLowerCase();\n    dispatch(setFilter(value));\n  };\n\n  return (\n    <Form.Group className=\"mb-3\" controlId=\"findContacts\">\n      <Form.Label> Find contacts by name</Form.Label>\n      <Form.Control\n        type=\"text\"\n        onChange={onChange}\n        placeholder=\"Taras\"\n        value={filterValue}\n      />\n    </Form.Group>\n  );\n};\n","import { createSelector } from '@reduxjs/toolkit';\nimport { selectContacts } from './contacts/selectors';\nimport { selectFilter } from './filter/selectors';\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter)\n    );\n  }\n);\n","import { useDispatch, useSelector } from 'react-redux';\n\nimport { deleteContact } from 'redux/contacts/operations';\nimport { selectVisibleContacts } from 'redux/selectors';\nimport { ListGroup, Button } from 'react-bootstrap';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  return (\n    <ListGroup as=\"ul\">\n      {visibleContacts.map(({ id, name, number }) => (\n        <ListGroup.Item\n          as=\"li\"\n          key={id}\n          className=\"d-flex justify-content-between align-items-center\"\n        >\n          <span>\n            {name}: {number}\n          </span>\n          <Button\n            variant=\"outline-warning\"\n            type=\"button\"\n            onClick={() => dispatch(deleteContact(id))}\n          >\n            Delete\n          </Button>\n        </ListGroup.Item>\n      ))}\n      {visibleContacts.length === 0 && (\n        <p>Sorry, You have no contacts with such name</p>\n      )}\n    </ListGroup>\n  );\n};\n","import img from '../../src/img/tell.jpg';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport {\n  selectContacts,\n  selectErrorContacts,\n  selectIsLoadingContacts,\n} from 'redux/contacts/selectors';\n//chakra\nimport { Box, Heading, Text } from '@chakra-ui/react';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { useEffect } from 'react';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoadingContacts);\n  const error = useSelector(selectErrorContacts);\n  const contacts = useSelector(selectContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Box display={'flex'} flexDirection={'column'} position={'relative'}>\n        <ContactForm />\n\n        {isLoading && !error && <b>Request in progress...</b>}\n        {contacts.length > 0 ? (\n          <Box\n            backgroundColor={img}\n            shadow={'dark-lg'}\n            p={'10'}\n            m={'auto'}\n            mt={5}\n            w={330}\n            display={'flex'}\n            flexDirection={'column'}\n            alignItems={'center'}\n            justifyContent={'flex-start'}\n            borderRadius={20}\n          >\n            <Heading p={0} m={0}>\n              Your contacts\n            </Heading>\n            <Filter />\n            <ContactList />\n          </Box>\n        ) : (\n          <Text fontSize=\"50px\" color=\"blue\">\n            'You have no contacts'\n          </Text>\n        )}\n      </Box>\n    </>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectIsLoadingContacts","isLoading","selectErrorContacts","error","Schema","Yup","shape","name","min","max","required","number","ContactForm","dispatch","useDispatch","useSelector","align","justify","h","bg","p","rounded","w","position","top","initialValues","onSubmit","formData","actions","find","el","toLowerCase","alert","addContact","resetForm","validationSchema","handleSubmit","errors","touched","spacing","isInvalid","htmlFor","fontSize","fontWeight","as","Input","id","type","variant","pattern","title","email","colorScheme","width","padding","selectFilter","filter","value","Filter","filterValue","Form","className","controlId","onChange","e","target","setFilter","placeholder","selectVisibleContacts","createSelector","contact","includes","ContactList","visibleContacts","ListGroup","map","Button","onClick","deleteContact","length","Contacts","useEffect","fetchContacts","display","flexDirection","backgroundColor","img","shadow","m","mt","alignItems","justifyContent","borderRadius","color"],"sourceRoot":""}