{"version":3,"file":"static/js/690.a842dc78.chunk.js","mappings":"4UAeMA,EAASC,EAAAA,KAAaC,MAAM,CAChCC,MAAOF,EAAAA,KAAaE,QAAQC,SAAS,qBACrCC,SAAUJ,EAAAA,KAAaK,IAAI,EAAG,cAAcF,SAAS,0BAG1CG,EAAY,WACvB,IAAMC,GAAWC,EAAAA,EAAAA,MAQjB,OACE,SAAC,IAAD,CAAMC,MAAM,SAASC,QAAQ,SAASC,EAAE,OAAxC,UACE,SAAC,KAAD,CACEC,UAAU,UACVC,EAAE,KACFC,QAAQ,KACRC,GAAG,QACHC,IAAI,WACJC,OAAO,IANT,UAQE,SAAC,KAAD,CACEC,cAAe,CACbhB,MAAO,GACPE,SAAU,IAEZe,SArBS,SAACC,EAAUC,GAE1Bd,GAASe,EAAAA,EAAAA,KAAM,UAAKF,KACpBC,EAAQE,WACT,EAkBOC,iBAAkBzB,EANpB,SAQG,gBAAG0B,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQC,EAAzB,EAAyBA,QAAzB,OACC,iBAAMR,SAAUM,EAAhB,UACE,UAAC,IAAD,CAAQG,QAAS,EAAGnB,MAAM,aAA1B,WACE,UAAC,KAAD,CAAaoB,YAAaH,EAAOxB,OAASyB,EAAQzB,MAAlD,WACE,SAAC,IAAD,CAAW4B,SAAS,OAApB,oBACA,SAAC,KAAD,CACEC,GAAIC,EAAAA,EACJC,GAAG,QACHC,KAAK,QACLC,KAAK,OACLC,YAAY,mBACZrB,GAAG,WACHe,SAAS,OACTO,EAAG,SAEL,SAAC,KAAD,UAAmBX,EAAOQ,WAE5B,UAAC,KAAD,CAAaL,YAAaH,EAAOtB,UAAYuB,EAAQvB,SAArD,WACE,SAAC,IAAD,CAAWkC,QAAQ,WAAWR,SAAS,OAAvC,uBAGA,SAAC,KAAD,CACEC,GAAIC,EAAAA,EACJC,GAAG,WACHC,KAAK,WACLC,KAAK,WACLC,YAAY,WACZrB,GAAG,WACHe,SAAS,OACTO,EAAG,SAEL,SAAC,KAAD,UAAmBX,EAAOtB,eAE5B,SAAC,IAAD,CACE+B,KAAK,SACLI,YAAY,SACZT,SAAS,OACTU,MAAM,OAJR,uBAjCL,OAgDV,E,UC1Fc,SAASC,IACtB,IAAMC,GAAYC,EAAAA,EAAAA,IAAYC,EAAAA,IACxBC,GAAQF,EAAAA,EAAAA,IAAYG,EAAAA,GAE1B,OACE,iCACE,SAAC,IAAD,CAAMhB,SAAS,MAAMiB,MAAM,OAAOhB,GAAG,IAAIiB,UAAW,CAAC,OAAQ,UAA7D,kDAGA,SAAC1C,EAAD,IACCoC,IAAcG,IAAS,wCAG7B,C,4LCRGI,GAAOC,EAAAA,EAAAA,IAAW,SAAeC,EAAOC,GAC1C,IAAMC,GAASC,EAAAA,EAAAA,IAAe,OAAQH,GACtC,GAA0DI,EAAAA,EAAAA,IAAiBJ,GAA1BK,GAAjD,EAAQC,UAAR,EAAmBhD,MAAnB,EAA0BiD,WAA1B,EAAsCC,QAAtC,aACMC,ECZR,SAAiBC,GACf,IAAMC,EAAQC,OAAOC,OAAO,CAAC,EAAGH,GAChC,IAAK,IAAII,KAAOH,OACK,IAAfA,EAAMG,WACDH,EAAMG,GAEjB,OAAOH,CACR,CDKsBI,CAAQ,CAC3BlB,UAAWG,EAAM1C,MACjB0D,eAAgBhB,EAAMO,WACtBU,cAAejB,EAAMQ,SAEvB,OAAuBU,EAAAA,EAAAA,KACrBC,EAAAA,EAAAA,GADwB,QAAC,gBAGvBlB,IAAAA,EACAK,WAAWc,EAAAA,EAAAA,IAAG,cAAepB,EAAMM,YAChCG,GACAJ,GANmB,IAOtBgB,MAAOnB,IAGZ,IACDJ,EAAKwB,YAAc,M","sources":["components/LoginForm/LoginForm.jsx","pages/Login.js","../node_modules/@chakra-ui/layout/dist/chunk-P74GIWPW.mjs","../node_modules/@chakra-ui/object-utils/dist/chunk-R3DH46PF.mjs"],"sourcesContent":["import { useDispatch } from 'react-redux';\nimport { logIn } from 'redux/auth/operations';\nimport { Field, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport {\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Input,\n  VStack,\n} from '@chakra-ui/react';\n\nconst Schema = Yup.object().shape({\n  email: Yup.string().email().required('Email is required'),\n  password: Yup.string().min(7, 'Too Short!').required('Password is required'),\n});\n\nexport const LoginForm = () => {\n  const dispatch = useDispatch();\n\n  const onSubmit = (formData, actions) => {\n    // alert(JSON.stringify(formData));\n    dispatch(logIn({ ...formData }));\n    actions.resetForm();\n  };\n\n  return (\n    <Flex align=\"center\" justify=\"center\" h=\"50vh\">\n      <Box\n        boxShadow=\"dark-lg\"\n        p=\"16\"\n        rounded=\"md\"\n        bg=\"white\"\n        pos=\"absolute\"\n        margin=\"0\"\n      >\n        <Formik\n          initialValues={{\n            email: '',\n            password: '',\n          }}\n          onSubmit={onSubmit}\n          validationSchema={Schema}\n        >\n          {({ handleSubmit, errors, touched }) => (\n            <form onSubmit={handleSubmit}>\n              <VStack spacing={4} align=\"flex-start\">\n                <FormControl isInvalid={!!errors.email && touched.email}>\n                  <FormLabel fontSize=\"30px\">Email</FormLabel>\n                  <Field\n                    as={Input}\n                    id=\"email\"\n                    name=\"email\"\n                    type=\"text\"\n                    placeholder=\"myemail@mail.com\"\n                    bg=\"blue.100\"\n                    fontSize=\"20px\"\n                    w={'90%'}\n                  />\n                  <FormErrorMessage>{errors.name}</FormErrorMessage>\n                </FormControl>\n                <FormControl isInvalid={!!errors.password && touched.password}>\n                  <FormLabel htmlFor=\"password\" fontSize=\"30px\">\n                    Password\n                  </FormLabel>\n                  <Field\n                    as={Input}\n                    id=\"password\"\n                    name=\"password\"\n                    type=\"password\"\n                    placeholder=\"Password\"\n                    bg=\"blue.100\"\n                    fontSize=\"20px\"\n                    w={'90%'}\n                  />\n                  <FormErrorMessage>{errors.password}</FormErrorMessage>\n                </FormControl>\n                <Button\n                  type=\"submit\"\n                  colorScheme=\"yellow\"\n                  fontSize=\"20px\"\n                  width=\"100%\"\n                >\n                  Login\n                </Button>\n              </VStack>\n            </form>\n          )}\n        </Formik>\n      </Box>\n    </Flex>\n  );\n};\n","import { Text } from '@chakra-ui/react';\nimport { LoginForm } from 'components/LoginForm/LoginForm';\nimport { useSelector } from 'react-redux';\nimport { selectErrorUser, selectIsLoadingUser } from 'redux/auth/selectors';\n\nexport default function Login() {\n  const isLoading = useSelector(selectIsLoadingUser);\n  const error = useSelector(selectErrorUser);\n\n  return (\n    <>\n      <Text fontSize=\"6xl\" color=\"blue\" as=\"i\" textAlign={['left', 'center']}>\n        Please log in to your phone book!!!\n      </Text>\n      <LoginForm />\n      {isLoading && !error && <b>Loading...</b>}\n    </>\n  );\n}\n","// src/text.tsx\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useStyleConfig\n} from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { compact } from \"@chakra-ui/object-utils\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Text = forwardRef(function Text2(props, ref) {\n  const styles = useStyleConfig(\"Text\", props);\n  const { className, align, decoration, casing, ...rest } = omitThemingProps(props);\n  const aliasedProps = compact({\n    textAlign: props.align,\n    textDecoration: props.decoration,\n    textTransform: props.casing\n  });\n  return /* @__PURE__ */ jsx(\n    chakra.p,\n    {\n      ref,\n      className: cx(\"chakra-text\", props.className),\n      ...aliasedProps,\n      ...rest,\n      __css: styles\n    }\n  );\n});\nText.displayName = \"Text\";\n\nexport {\n  Text\n};\n","// src/compact.ts\nfunction compact(object) {\n  const clone = Object.assign({}, object);\n  for (let key in clone) {\n    if (clone[key] === void 0)\n      delete clone[key];\n  }\n  return clone;\n}\n\nexport {\n  compact\n};\n"],"names":["Schema","Yup","shape","email","required","password","min","LoginForm","dispatch","useDispatch","align","justify","h","boxShadow","p","rounded","bg","pos","margin","initialValues","onSubmit","formData","actions","logIn","resetForm","validationSchema","handleSubmit","errors","touched","spacing","isInvalid","fontSize","as","Input","id","name","type","placeholder","w","htmlFor","colorScheme","width","Login","isLoading","useSelector","selectIsLoadingUser","error","selectErrorUser","color","textAlign","Text","forwardRef","props","ref","styles","useStyleConfig","omitThemingProps","rest","className","decoration","casing","aliasedProps","object","clone","Object","assign","key","compact","textDecoration","textTransform","jsx","chakra","cx","__css","displayName"],"sourceRoot":""}