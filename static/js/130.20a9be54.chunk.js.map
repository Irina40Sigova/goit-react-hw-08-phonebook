{"version":3,"file":"static/js/130.20a9be54.chunk.js","mappings":"uQAAaA,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,EAEtBC,EAA0B,SAAAH,GAAK,OAAIA,EAAMC,SAASG,SAAnB,EAE/BC,EAAsB,SAAAL,GAAK,OAAIA,EAAMC,SAASK,KAAnB,E,SCIlCC,EAAgB,CACpBC,KAAM,GACNC,OAAQ,IASJC,EAASC,EAAAA,KAAaC,MAAM,CAChCJ,KAAMG,EAAAA,KACHE,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,QATH,2HAWI,8DAEDC,WACHP,OAAQE,EAAAA,KACLE,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,QAdH,+EAgBI,gGAEDC,aAGQC,EAAc,WACzB,IAAMC,GAAWC,EAAAA,EAAAA,MACXlB,GAAWmB,EAAAA,EAAAA,IAAYrB,GAa7B,OACE,SAAC,KAAD,CACEQ,cAAeA,EACfc,SAdiB,SAACC,EAAUC,GAK9B,GAJiBtB,EAASuB,MACxB,SAAAC,GAAE,OAAIA,EAAGjB,KAAKkB,gBAAkBJ,EAASd,KAAKkB,aAA5C,IAGU,OAAOC,MAAML,EAASd,KAAO,4BAE3CU,GAASU,EAAAA,EAAAA,KAAW,UAAKN,KACzBC,EAAQM,WACT,EAMGC,iBAAkBpB,EAHpB,UAKE,UAACqB,EAAA,EAAD,CAAMC,GAAIC,EAAAA,GAAYC,UAAU,OAAhC,WACE,SAACH,EAAA,QAAD,CAAYG,UAAU,OAAOC,UAAU,kBAAvC,UACE,UAACJ,EAAA,QAAD,mBAEE,SAACA,EAAA,UAAD,CAAcC,GAAII,EAAAA,GAAOC,KAAK,OAAO7B,KAAK,UAC1C,SAAC,KAAD,CAAcA,KAAK,OAAO8B,UAAU,cAGxC,UAACP,EAAA,QAAD,CAAYG,UAAU,OAAOC,UAAU,mBAAvC,WACE,UAACJ,EAAA,QAAD,oBAEE,SAACA,EAAA,UAAD,CAAcC,GAAII,EAAAA,GAAOC,KAAK,MAAM7B,KAAK,eAE3C,SAAC,KAAD,CAAcA,KAAK,SAAS8B,UAAU,YAExC,SAACC,EAAA,EAAD,CAAQF,KAAK,SAAb,6BAIP,E,UC9EYG,EAAe,SAAAxC,GAAK,OAAIA,EAAMyC,OAAOC,KAAjB,ECKpBC,EAAS,WACpB,IAAMzB,GAAWC,EAAAA,EAAAA,MACXyB,GAAcxB,EAAAA,EAAAA,IAAYoB,GAOhC,OACE,UAACT,EAAA,QAAD,CAAYG,UAAU,OAAOC,UAAU,eAAvC,WACE,SAACJ,EAAA,QAAD,sCACA,SAACA,EAAA,UAAD,CACEM,KAAK,OACLQ,SAVW,SAAAC,GACf,IAAMJ,EAAQI,EAAEC,OAAOL,MAAMhB,cAC7BR,GAAS8B,EAAAA,EAAAA,GAAUN,GACpB,EAQKO,YAAY,QACZP,MAAOE,MAId,ECdc,SAASM,IACtB,IAAMhC,GAAWC,EAAAA,EAAAA,MACXf,GAAYgB,EAAAA,EAAAA,IAAYjB,GACxBG,GAAQc,EAAAA,EAAAA,IAAYf,GACpBJ,GAAWmB,EAAAA,EAAAA,IAAYrB,GAM7B,OAJAoD,EAAAA,EAAAA,YAAU,WACRjC,GAASkC,EAAAA,EAAAA,MACV,GAAE,CAAClC,KAGF,iCACE,gDACA,SAACD,EAAD,IACCb,IAAcE,IAAS,kDACvBL,EAASoD,OAAS,GACjB,0BACE,SAACV,EAAD,MAGF,yBAIP,C","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","redux/filter/selectors.js","components/Filter/Filter.jsx","pages/Contacts.js"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoadingContacts = state => state.contacts.isLoading;\n\nexport const selectErrorContacts = state => state.contacts.error;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { Formik, Form as FormikForm, ErrorMessage, Field } from 'formik';\nimport { Button, Form } from 'react-bootstrap';\nimport * as Yup from 'yup';\n\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nconst nameRegex =\n  /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/gm;\n\nconst numberRegex =\n  /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/gm;\n\nconst Schema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Too Short!')\n    .max(20, 'Too Long!')\n    .matches(\n      nameRegex,\n      'Name may contain only letters, apostrophe, dash and spaces'\n    )\n    .required(),\n  number: Yup.string()\n    .min(6, 'Too Short!')\n    .max(15, 'Too Long!')\n    .matches(\n      numberRegex,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required(),\n});\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = (formData, actions) => {\n    const sameName = contacts.find(\n      el => el.name.toLowerCase() === formData.name.toLowerCase()\n    );\n\n    if (sameName) return alert(formData.name + ' is already in contacts.');\n\n    dispatch(addContact({ ...formData }));\n    actions.resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      validationSchema={Schema}\n    >\n      <Form as={FormikForm} className=\"mb-5\">\n        <Form.Group className=\"mb-3\" controlId=\"formContactName\">\n          <Form.Label>\n            Name\n            <Form.Control as={Field} type=\"text\" name=\"name\" />\n            <ErrorMessage name=\"name\" component=\"div\" />\n          </Form.Label>\n        </Form.Group>\n        <Form.Group className=\"mb-3\" controlId=\"formContactPhone\">\n          <Form.Label>\n            Phone\n            <Form.Control as={Field} type=\"tel\" name=\"number\" />\n          </Form.Label>\n          <ErrorMessage name=\"number\" component=\"div\" />\n        </Form.Group>\n        <Button type=\"submit\">Add contact</Button>\n      </Form>\n    </Formik>\n  );\n};\n","export const selectFilter = state => state.filter.value;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from '../../redux/filter/filterSlice';\nimport { selectFilter } from 'redux/filter/selectors';\nimport { Form } from 'react-bootstrap';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filterValue = useSelector(selectFilter);\n\n  const onChange = e => {\n    const value = e.target.value.toLowerCase();\n    dispatch(setFilter(value));\n  };\n\n  return (\n    <Form.Group className=\"mb-3\" controlId=\"findContacts\">\n      <Form.Label> Find contacts by name</Form.Label>\n      <Form.Control\n        type=\"text\"\n        onChange={onChange}\n        placeholder=\"Taras\"\n        value={filterValue}\n      />\n    </Form.Group>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport {\n  selectContacts,\n  selectErrorContacts,\n  selectIsLoadingContacts,\n} from 'redux/contacts/selectors';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoadingContacts);\n  const error = useSelector(selectErrorContacts);\n  const contacts = useSelector(selectContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <title>Your Phone book</title>\n      <ContactForm />\n      {isLoading && !error && <b>Request in progress...</b>}\n      {contacts.length > 0 ? (\n        <div>\n          <Filter />\n        </div>\n      ) : (\n        'You have no contacts'\n      )}\n    </>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectIsLoadingContacts","isLoading","selectErrorContacts","error","initialValues","name","number","Schema","Yup","shape","min","max","matches","required","ContactForm","dispatch","useDispatch","useSelector","onSubmit","formData","actions","find","el","toLowerCase","alert","addContact","resetForm","validationSchema","Form","as","FormikForm","className","controlId","Field","type","component","Button","selectFilter","filter","value","Filter","filterValue","onChange","e","target","setFilter","placeholder","Contacts","useEffect","fetchContacts","length"],"sourceRoot":""}