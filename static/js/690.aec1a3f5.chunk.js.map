{"version":3,"file":"static/js/690.aec1a3f5.chunk.js","mappings":"wTAcaA,EAAY,WACvB,IAAMC,GAAWC,EAAAA,EAAAA,MAyBjB,OACE,SAAC,IAAD,CAAMC,MAAM,SAASC,QAAQ,SAASC,EAAE,QAAxC,UACE,SAAC,KAAD,CACEC,GAAG,WACHC,EAAG,EACHC,QAAQ,KACRC,EAAG,MACHC,SAAU,QACVC,IAAK,IANP,UAQE,SAAC,KAAD,CACEC,cAAe,CACbC,MAAO,GACPC,SAAU,IAEZC,SAtCS,SAACC,EAAUC,GAC1BC,MAAMC,KAAKC,UAAUJ,IACrBf,GAASoB,EAAAA,EAAAA,KAAM,UAAKL,KACpBC,EAAQK,WACT,EA6BK,SAOG,gBAAGC,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQC,EAAzB,EAAyBA,QAAzB,OACC,iBAAMV,SAAUQ,EAAhB,UACE,UAAC,IAAD,CAAQG,QAAS,EAAGvB,MAAM,aAA1B,WACE,UAAC,KAAD,CAAawB,YAAaH,EAAOX,OAASY,EAAQZ,MAAlD,WACE,SAAC,IAAD,CAAWe,SAAS,OAApB,oBACA,SAAC,KAAD,CACEC,GAAIC,EAAAA,EACJC,GAAG,QACHC,KAAK,QACLC,KAAK,OACLC,YAAY,mBACZ5B,GAAG,WACHsB,SAAS,OACTnB,EAAG,SAEL,SAAC,KAAD,UAAmBe,EAAOQ,WAE5B,UAAC,KAAD,CAAaL,YAAaH,EAAOV,UAAYW,EAAQX,SAArD,WACE,SAAC,IAAD,CAAWqB,QAAQ,WAAWP,SAAS,OAAvC,uBAGA,SAAC,KAAD,CACEC,GAAIC,EAAAA,EACJC,GAAG,WACHC,KAAK,WACLC,KAAK,WACLC,YAAY,WACZ5B,GAAG,WACHsB,SAAS,OACTnB,EAAG,SAEL,SAAC,KAAD,UAAmBe,EAAOV,eAE5B,SAAC,IAAD,CACEmB,KAAK,SACLG,YAAY,SACZR,SAAS,OACTS,MAAM,OAJR,uBAjCL,OAgDV,E,UCrGc,SAASC,IACtB,IAAMC,GAAYC,EAAAA,EAAAA,IAAYC,EAAAA,IACxBC,GAAQF,EAAAA,EAAAA,IAAYG,EAAAA,GAE1B,OACE,4BACE,sCACA,SAAC3C,EAAD,IACCuC,IAAcG,IAAS,wCAG7B,C","sources":["components/LoginForm/LoginForm.jsx","pages/Login.js"],"sourcesContent":["import { useDispatch } from 'react-redux';\nimport { logIn } from 'redux/auth/operations';\nimport { Field, Formik } from 'formik';\nimport {\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Input,\n  VStack,\n} from '@chakra-ui/react';\n\nexport const LoginForm = () => {\n  const dispatch = useDispatch();\n\n  const onSubmit = (formData, actions) => {\n    alert(JSON.stringify(formData));\n    dispatch(logIn({ ...formData }));\n    actions.resetForm();\n  };\n\n  // const onSubmit = e => {\n  //   const form = e.currentTarget;\n  //   alert(\n  //     JSON.stringify({\n  //       email: form.elements.email.value,\n  //       password: form.elements.password.value,\n  //     })\n  //   );\n  //   dispatch(\n  //     logIn({\n  //       email: form.elements.email.value,\n  //       password: form.elements.password.value,\n  //     })\n  //   );\n  //   form.reset();\n  // };\n\n  return (\n    <Flex align=\"center\" justify=\"center\" h=\"100vh\">\n      <Box\n        bg=\"blue.200\"\n        p={8}\n        rounded=\"md\"\n        w={'20%'}\n        position={'fixed'}\n        top={250}\n      >\n        <Formik\n          initialValues={{\n            email: '',\n            password: '',\n          }}\n          onSubmit={onSubmit}\n        >\n          {({ handleSubmit, errors, touched }) => (\n            <form onSubmit={handleSubmit}>\n              <VStack spacing={4} align=\"flex-start\">\n                <FormControl isInvalid={!!errors.email && touched.email}>\n                  <FormLabel fontSize=\"30px\">Email</FormLabel>\n                  <Field\n                    as={Input}\n                    id=\"email\"\n                    name=\"email\"\n                    type=\"text\"\n                    placeholder=\"myemail@mail.com\"\n                    bg=\"blue.100\"\n                    fontSize=\"20px\"\n                    w={'90%'}\n                  />\n                  <FormErrorMessage>{errors.name}</FormErrorMessage>\n                </FormControl>\n                <FormControl isInvalid={!!errors.password && touched.password}>\n                  <FormLabel htmlFor=\"password\" fontSize=\"30px\">\n                    Password\n                  </FormLabel>\n                  <Field\n                    as={Input}\n                    id=\"password\"\n                    name=\"password\"\n                    type=\"password\"\n                    placeholder=\"Password\"\n                    bg=\"blue.100\"\n                    fontSize=\"20px\"\n                    w={'90%'}\n                  />\n                  <FormErrorMessage>{errors.password}</FormErrorMessage>\n                </FormControl>\n                <Button\n                  type=\"submit\"\n                  colorScheme=\"yellow\"\n                  fontSize=\"20px\"\n                  width=\"100%\"\n                >\n                  Login\n                </Button>\n              </VStack>\n            </form>\n          )}\n        </Formik>\n      </Box>\n    </Flex>\n  );\n};\n","import { LoginForm } from 'components/LoginForm/LoginForm';\nimport { useSelector } from 'react-redux';\nimport { selectErrorUser, selectIsLoadingUser } from 'redux/auth/selectors';\n\nexport default function Login() {\n  const isLoading = useSelector(selectIsLoadingUser);\n  const error = useSelector(selectErrorUser);\n\n  return (\n    <div>\n      <title>Login</title>\n      <LoginForm />\n      {isLoading && !error && <b>Loading...</b>}\n    </div>\n  );\n}\n"],"names":["LoginForm","dispatch","useDispatch","align","justify","h","bg","p","rounded","w","position","top","initialValues","email","password","onSubmit","formData","actions","alert","JSON","stringify","logIn","resetForm","handleSubmit","errors","touched","spacing","isInvalid","fontSize","as","Input","id","name","type","placeholder","htmlFor","colorScheme","width","Login","isLoading","useSelector","selectIsLoadingUser","error","selectErrorUser"],"sourceRoot":""}